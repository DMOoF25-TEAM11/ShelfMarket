<!--
  View: ManagesShelfTypeView
  Purpose:
    - WPF Page for adding, editing, and deleting shelf types.
    - Displays a form (Name, Description), CRUD command buttons, a list of existing shelf types, and status messages.

  DataContext (expected from ManagesShelfTypeViewModel):
    - string Name: Two-way bound to Name input.
    - string Description: Two-way bound to Description input.
    - bool IsAddMode: Controls visibility of the "Add" button.
    - bool IsEditMode: Controls visibility of "Save" and "Delete" buttons.
    - string Error, bool HasError: Error message and visibility flag.
    - string InfoMessage, bool HasInfoMessage: Info message and visibility flag.
    - ICommand AddCommand, SaveCommand, DeleteCommand, CancelCommand: CRUD and cancel actions.

  Resources required:
    - BoolToVis (IValueConverter): Converts bool to Visibility for button and message visibility.
      Ensure this is declared in a scope accessible to the Page (e.g., App.xaml or merged theme resources).

  Notes:
    - Title and some UI text are in Danish to match app language.
    - TextBox bindings use UpdateSourceTrigger=PropertyChanged for immediate ViewModel updates.
    - This Page hosts a user control `ManagesShelfTypeListView` to show existing shelf types.
-->

<UserControl x:Class="ShelfMarket.UI.Views.ManagesShelfTypeView"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:controls="clr-namespace:ShelfMarket.UI.Views.UserControls" 
      xmlns:viewmodels="clr-namespace:ShelfMarket.UI.ViewModels" 
      d:DataContext="{d:DesignInstance Type=viewmodels:ManagesShelfTypeViewModel}"
      mc:Ignorable="d">

    <!--
      Layout root:
        - 5 rows:
          0: Title (Auto)
          1: Form inputs (Auto)
          2: Action buttons (Auto)
          3: List/UserControl area (*)
          4: Status messages (Auto)
    -->
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Title: Centered heading describing the page purpose (Danish) -->
        <TextBlock Grid.Row="0"
                   Text="Tilføj og rediger reol typer"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"/>

        <!--
          Form:
            - Two-column input layout for Name and Description.
            - Uses UpdateSourceTrigger=PropertyChanged for immediate binding updates.
            - Column definitions:
              0: Label for Name (Auto)
              1: Name TextBox (250)
              2: Spacer (20)
              3: Label for Description (Auto)
              4: Description TextBox (250)
        -->
        <Grid Grid.Row="1" Margin="0,10,0,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="250"/>
                <ColumnDefinition Width="20"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="250"/>
            </Grid.ColumnDefinitions>

            <!-- Name input -->
            <TextBlock Grid.Column="0"
                       Text="Name:"
                       VerticalAlignment="Center"
                       Margin="0,0,5,0"/>
            <TextBox Grid.Column="1"
                     Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" 
                     MaxHeight="20"
                     MinWidth="200"
                     VerticalAlignment="Center"/>

            <!-- Description input -->
            <TextBlock Grid.Column="3"
                       Text="Description:"
                       VerticalAlignment="Center"
                       Margin="10,0,5,0"/>
            <TextBox Grid.Column="4"
                     Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}" 
                     MaxHeight="20"
                     MinWidth="200"
                     VerticalAlignment="Center"/>
        </Grid>

        <!--
          Buttons:
            - Visibility driven by IsAddMode/IsEditMode via BoolToVis converter.
            - Commands should be implemented in the ViewModel.
            - "Annuller" (Cancel) is always visible to reset or leave edit state.
        -->
        <StackPanel Grid.Row="2"
                    Orientation="Horizontal"
                    HorizontalAlignment="Center"
                    Margin="0,10,0,0">
            <!-- Add is visible when creating a new shelf type -->
            <Button Content="Tilføj"
                    Width="80"
                    Command="{Binding AddCommand}"
                    Visibility="{Binding IsAddMode, Converter={StaticResource BoolToVis}}"/>

            <!-- Save/Delete are visible when editing an existing shelf type -->
            <Button Content="Gem"
                    Width="80"
                    Command="{Binding SaveCommand}"
                    Visibility="{Binding IsEditMode, Converter={StaticResource BoolToVis}}"/>
            <Button Content="Slet"
                    Width="80"
                    Command="{Binding DeleteCommand}"
                    Visibility="{Binding IsEditMode, Converter={StaticResource BoolToVis}}"/>

            <!-- Cancel is always visible to clear the form or exit edit mode -->
            <Button Content="Annuller"
                    Width="80"
                    Command="{Binding CancelCommand}"/>
        </StackPanel>

        <!--
          ListView/UserControl:
            - Hosts the ManagesShelfTypeListView user control that lists existing shelf types.
            - Expected to coordinate with the ViewModel to set selection and toggle IsEditMode.
        -->
        <controls:ManagesShelfTypeListView
            Grid.Row="3"
            x:Name="ManagesShelfTypeListViewControl"
            Margin="0,10,0,0"/>

        <!--
          Error and status messages:
            - Error: Red, bold, shown when HasError is true.
            - Info: Green, bold, shown when HasInfoMessage is true.
            - Visibility handled via BoolToVis converter.
        -->
        <StackPanel Grid.Row="4" Margin="0,10,0,0">
            <TextBlock Text="{Binding Error}"
                       Foreground="Red"
                       FontWeight="Bold"
                       Visibility="{Binding HasError, Converter={StaticResource BoolToVis}}"/>
            <TextBlock Text="{Binding InfoMessage}"
                       Foreground="Green"
                       FontWeight="Bold"
                       Visibility="{Binding HasInfoMessage, Converter={StaticResource BoolToVis}}"/>
        </StackPanel>
    </Grid>
</UserControl>

